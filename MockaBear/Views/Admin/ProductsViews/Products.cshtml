@model IEnumerable<MockaBear.Models.Product>
@using System.Text.Encodings.Web
@{
    Layout = "~/Views/Shared/EspaceAdmin/_AdminLayout.cshtml";
    ViewData["Title"] = "Product Management";
}

@await Html.PartialAsync("~/Views/Admin/ProductsViews/_AddProduct.cshtml", (List<MockaBear.Models.Category>)ViewBag.Categories)
@await Html.PartialAsync("~/Views/Admin/ProductsViews/_ProductDetailModal.cshtml")
@await Html.PartialAsync("~/Views/Admin/ProductsViews/_EditProductModal.cshtml", (List<MockaBear.Models.Category>)ViewBag.Categories)
<section class="home-section">
    <nav>
        <div class="sidebar-button">
            <i class="fa-solid fa-bars sidebarBtn"></i>
            <span class="dashboard">Dashboard</span>
        </div>
        <div class="search-box">
            <input type="text" placeholder="Search. . ." />
            <i class="fa-solid fa-magnifying-glass"></i>
        </div>
        <div class="profile-details">
            <span class="admin-name">Emna Zghal</span>
        </div>
    </nav>
</section>
<section class="table-section">
    <div class="table-card">
        <div class="card-title">
            <div class="title-container">
                <h3><i class='bx bxs-coffee-bean'></i> Product list</h3>
                <button class="btn-add" onclick="openProductModal()">
                    <i class="bx bx-plus"></i> Add a product
                </button>
            </div>
            <form method="get" asp-controller="Product" asp-action="Products">
                <input type="hidden" name="section" value="products" />
                <div class="page-size-selector">
                    <label for="pageSize">Products per page :</label>
                    <select id="pageSize" name="pageSize" onchange="this.form.submit()">
                        @foreach (var size in new[] { 1, 2, 5, 10, 20, 50 })
                        {
                            if ((int?)ViewBag.PageSize == size)
                            {
                                <option value="@size" selected>@size</option>
                            }
                            else
                            {
                                <option value="@size">@size</option>
                            }
                        }
                    </select>
                </div>
            </form>
        </div>
        <table class="data-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Image</th>
                    <th>Price</th>
                    <th>Available</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Model)
                {
                    var name = JavaScriptEncoder.Default.Encode(product.Name);
                    var description = JavaScriptEncoder.Default.Encode(product.Description);
                    var price = product.Price.ToString("F2");
                    var isAvailable = product.IsAvailable.ToString();
                    var category = JavaScriptEncoder.Default.Encode(product.Category?.Name ?? "");
                    var image = product.Image;
                    <tr>
                        <td>@product.Name</td>
                        <td><img src="~/images/products/@product.Image" alt="Product Image" /></td>
                        <td>@product.Price €</td>

                        <td>
                            @if (!product.IsAvailable)
                            {
                                <span class="badge badge-unavailable">Not available</span>
                            }
                            else
                            {
                                <span class="badge badge-available">Available</span>
                            }
                        </td>
                        <td>@product.Category?.Name</td>
                        <td>
                            <button class="btn btn-outline btn-sm btn-view"
                                    onclick='showProductDetails(
                                        @Html.Raw(Json.Serialize(name)),
                                        @Html.Raw(Json.Serialize(description)),
                                        @Html.Raw(Json.Serialize(price)),
                                        @Html.Raw(Json.Serialize(isAvailable)),
                                        @Html.Raw(Json.Serialize(category)),
                                        @Html.Raw(Json.Serialize(product.Image))
                                    )'>
                                <i class='bx bx-search-alt-2'></i>
                            </button>



                            <button class="btn btn-outline btn-sm btn-edit"
                                    onclick="openEditProductModal(
                                    @product.Id,
                                    '@Html.Raw(JavaScriptEncoder.Default.Encode(product.Name))',
                                    '@Html.Raw(JavaScriptEncoder.Default.Encode(product.Description))',
                                    '@product.Price.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)',
                                    '@product.IsAvailable.ToString()',
                                    '@product.CategoryId')">
                                <i class='bx bxs-edit'></i>
                            </button>


                            <form asp-controller="Product" asp-action="Delete" asp-route-id="@product.Id" method="post" style="display:inline;">
                                <button type="submit" class="btn btn-outline btn-sm btn-delete" onclick="return confirm('Are you sure you want to delete this product?');">
                                    <i class='bx bxs-trash-alt'></i>
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="pagination">
            <button onclick="changePage(@(ViewBag.CurrentPage - 1))" class="btn1" @(ViewBag.CurrentPage == 1 ? "disabled" : "")>
                <i class='bx bxs-left-arrow'></i>
            </button>
            <ul>
                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                {
                    <li class="@(ViewBag.CurrentPage == i ? "active" : "")" onclick="changePage(@i)">@i</li>
                }
            </ul>
            <button onclick="changePage(@(ViewBag.CurrentPage + 1))" class="btn2" @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")>
                <i class='bx bxs-right-arrow'></i>
            </button>
        </div>
    </div>
</section>

<script>
    function changePage(page) {
        const urlParams = new URLSearchParams(window.location.search);
        urlParams.set("page", page);
        urlParams.set("pageSize", document.querySelector("select[name='pageSize']").value);
        window.location.search = urlParams.toString();
    }
</script>
@section Styles {
    <link rel="stylesheet" href="~/css/Admin/product.css" />
    <link rel="stylesheet" href="~/css/Admin/productModal.css" />
    <link rel="stylesheet" href="~/css/Admin/productDetailModal.css" />
}

@section Scripts {
    <script>
        function openProductModal() {
            document.getElementById("productModal").style.display = "flex";
            setTimeout(function () {
                $(".category-select").chosen({
                    width: "100%",
                    no_results_text: "No category found!"
                });
            }, 100);
        }

        function closeProductModal() {
            document.getElementById("productModal").style.display = "none";
        }

        function showProductDetails(name, description, price, isAvailable, categoryName, image) {
            document.getElementById("productDetailName").innerText = name;
            document.getElementById("productDetailDescription").innerText = description;
            document.getElementById("productDetailPrice").innerText = price;


            document.getElementById("productDetailAvailable").innerText = isAvailable === 'True' ? 'Yes' : 'No';
            document.getElementById("productDetailCategory").innerText = categoryName;
        const imagePath = "/Images/products/" + image;
        document.getElementById("productDetailImage").src = imagePath;
        document.getElementById("productDetailModal").style.display = "flex";
        }

        function closeProductDetailModal() {
            document.getElementById("productDetailModal").style.display = "none";
        }


                function openEditProductModal(id, name, description, price, isAvailable, categoryId) {
            document.getElementById("editProductId").value = id;
            document.getElementById("editProductName").value = name;
            document.getElementById("editProductDescription").value = description;
            document.getElementById("editProductPrice").value = price;
            document.getElementById("editProductAvailable").checked = isAvailable === 'True';
            document.getElementById("editProductCategoryId").value = categoryId;

            document.getElementById("editProductModal").style.display = "flex";

            setTimeout(function () {
                $(".category-select").trigger("chosen:updated");
            }, 100);
        }

        function closeEditProductModal() {
            document.getElementById("editProductModal").style.display = "none";
        }
    </script>
}
